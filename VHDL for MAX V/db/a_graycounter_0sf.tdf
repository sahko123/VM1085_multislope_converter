--a_graycounter CARRY_CHAIN="MANUAL" CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX V" WIDTH=3 aclr clk_en clock q carry_chain_length=48 ignore_carry_buffers="OFF"
--VERSION_BEGIN 22.1 cbx_a_gray2bin 2022:10:25:15:36:38:SC cbx_a_graycounter 2022:10:25:15:36:38:SC cbx_cycloneii 2022:10:25:15:36:38:SC cbx_mgl 2022:10:25:15:36:55:SC cbx_stratix 2022:10:25:15:36:38:SC cbx_stratixii 2022:10:25:15:36:38:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 4 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to parity1} POWER_UP_LEVEL=HIGH";

SUBDESIGN a_graycounter_0sf
( 
	aclr	:	input;
	clk_en	:	input;
	clock	:	input;
	q[2..0]	:	output;
) 
VARIABLE 
	counter2a[2..0] : dffeas;
	parity1 : dffeas
		WITH (
			power_up = "high"
		);
	cnt_en	: NODE;
	cntr_cout[2..0]	: WIRE;
	parity_cout	: WIRE;
	sclr	: NODE;
	updown	: NODE;

BEGIN 
	counter2a[].clk = clock;
	counter2a[].clrn = ( (! aclr), (! aclr), (! aclr));
	counter2a[].d = ( (counter2a[2].q $ cntr_cout[1..1]), (counter2a[1].q $ (counter2a[0].q & cntr_cout[0..0])), ((cnt_en & (counter2a[0].q $ (! parity_cout))) # ((! cnt_en) & counter2a[0].q)));
	counter2a[].ena = clk_en;
	counter2a[].sclr = sclr;
	parity1.clk = clock;
	parity1.d = ((cnt_en & ((counter2a[0..0].q $ counter2a[1..1].q) $ counter2a[2..2].q)) # ((! cnt_en) & parity1.q));
	parity1.ena = clk_en;
	parity1.prn = (! aclr);
	parity1.sclr = sclr;
	cnt_en = VCC;
	cntr_cout[] = ( B"0", (cntr_cout[0..0] & (! counter2a[0].q)), (cnt_en & parity_cout));
	parity_cout = (((! parity1.q) $ (! updown)) & cnt_en);
	q[] = counter2a[].q;
	sclr = GND;
	updown = VCC;
END;
--VALID FILE
